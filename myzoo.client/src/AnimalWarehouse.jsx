import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Container, Grid, Card, CardMedia, CardContent, CardActions, Typography, Button, Box, TextField } from "@mui/material";

const AnimalWarehouse = () => {
    const [animals, setAnimals] = useState([]);
    const [filteredAnimals, setFilteredAnimals] = useState([]);
    const [searchTerm, setSearchTerm] = useState("");
    const navigate = useNavigate();

    useEffect(() => {
        fetch("https://localhost:7174/api/zoo/warehouse-animals", {
            method: "GET",
            credentials: "include",
        })
            .then(response => {
                return response.json();
            })
            .then(data => {
                setAnimals(data.animals || []);
            })
            .catch(error => console.error("Hiba történt:", error));
    }, []);

    useEffect(() => {
        const filtered = animals.filter((animal) =>
            animal.animalSpecies?.species.toLowerCase().includes(searchTerm.toLowerCase())
        );
        setFilteredAnimals(filtered);
    }, [searchTerm, animals]);


    const sellAnimal = async (id) => {
        try {
            const response = await fetch("https://localhost:7174/api/buy/remove-from-warehouse", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(id),
                credentials: "include",
            });
                const data = await response.json();
            if (response.ok) {
                alert(data.message);
                setAnimals((prev) => prev.filter((a) => a.warehouseAnimalId !== id));
            } else {
                    alert(data.message || "Hiba történt!");
            }
        } catch (error) {
                console.error("Hálózati hiba:", error);
                alert("Nem sikerült az állat eltávolítása.");
        }
    };

    const moveToZoo = (id) => {
        fetch('https://localhost:7174/api/buy/add-to-zoo', {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            credentials: "include",
            body: JSON.stringify(id),
        })
            .then((response) => response.json())
            .then((data) => {
                if (data.success) {
                    setAnimals((prev) => prev.filter((a) => a.warehouseAnimalId !== id));
                }
            })
            .catch((error) => console.error("Hiba történt az áthelyezéskor:", error));
    };

    const handleNavigate = (animalId) => {
        navigate(`/animal-data/${animalId}`);
    };

    return (
        <Container sx={{ paddingY: 4 }}>
            <Typography variant="h2" fontWeight="bold" mb={3}>
                Animal warehouse
            </Typography>

            <Box sx={{ mb: 3 }}>
                <TextField
                    fullWidth
                    label="Search by Animal Name"
                    variant="outlined"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                />
            </Box>

            <Grid container spacing={3}>
                {filteredAnimals.map((animal) => (
                    <Grid item xs={12} small={6} medium={4} key={animal.warehouseAnimalId}>
                        <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                            <CardMedia
                                component="img"
                                height="300"
                                image={animal.image}
                                alt={animal.animalSpecies?.species}
                                sx={{ objectFit: "cover" }}
                                onClick={() => handleNavigate(animal.animalId)}
                            />
                            <CardContent>
                                <Typography variant="h6">
                                    {animal.animalSpecies?.species}
                                </Typography>
                                <Typography variant="body2" color="text.secondary">
                                    Sex: {animal.gender === 0 ? "Female" : animal.gender === 1 ? "Male" : "Baby"}
                                </Typography>
                                <Typography variant="body2" color="text.secondary">
                                    Value: {animal.value / 10}
                                </Typography>
                            </CardContent>
                            <CardActions sx={{ display: 'flex', flexDirection: 'column', gap: 1, px: 2, pb: 2 }}>
                                <Button
                                    variant="contained"
                                    fullWidth
                                    color="success"
                                    onClick={() => moveToZoo(animal.warehouseAnimalId)}
                                >
                                    Add to zoo
                                </Button>
                                <Button
                                    variant="outlined"
                                    fullWidth
                                    color="error"
                                    onClick={() => sellAnimal(animal.warehouseAnimalId)}
                                >
                                    Sell
                                </Button>
                            </CardActions>
                        </Card>
                    </Grid>
                ))}
            </Grid>
        </Container>
    );
};

export default AnimalWarehouse;